{"version":3,"file":"admin.js","mappings":"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","sources":["webpack://@yippy/auth-ldap/webpack/bootstrap","webpack://@yippy/auth-ldap/webpack/runtime/compat get default export","webpack://@yippy/auth-ldap/webpack/runtime/define property getters","webpack://@yippy/auth-ldap/webpack/runtime/hasOwnProperty shorthand","webpack://@yippy/auth-ldap/external root \"flarum.core.compat['app']\"","webpack://@yippy/auth-ldap/external root \"flarum.core.compat['common/components/Button']\"","webpack://@yippy/auth-ldap/./src/admin/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","import app from 'flarum/app';\r\nimport ExtensionPage from 'flarum/admin/components/ExtensionPage';\r\nimport Button from 'flarum/common/components/Button';\r\n\r\ninterface LdapDomain {\r\n  host: string\r\n  port: number\r\n  version: number\r\n  baseDN: string\r\n  filter: string\r\n  admin: {\r\n    dn: string\r\n    password: string\r\n  }\r\n  searchFields: string[]\r\n  user: {\r\n    username: string\r\n    mail: string\r\n    nicknameFields: string[]\r\n  }\r\n  followReferrals: boolean\r\n  useSSL: boolean\r\n  useTLS: boolean\r\n  isEnabled: boolean\r\n}\r\nconst settingsPrefix = 'yippy-auth-ldap.';\r\nconst translationPrefix = 'yippy-auth-ldap.admin.settings.';\r\nconst ldapDomainsSettingKey = settingsPrefix+'domains';\r\nconst ldapNicknameAvailableFields = [\r\n  // Full Name\r\n  'cn',\r\n  'commonName',\r\n  'displayName',\r\n  'name',\r\n  // Title\r\n  'title',\r\n  'personalTitle',\r\n  // First Name\r\n  'givenName',\r\n  // Middle Initial\r\n  'initials',\r\n  // Last Name\r\n  'sn',\r\n  'surname',\r\n];\r\nconst ldapEmailAvailableFields = [\r\n  // Email Address\r\n  'mail',\r\n  'rfc822Mailbox ',\r\n];\r\nconst ldapUsernameAvailableFields = [\r\n  // User ID\r\n  'mailNickname',\r\n  'sAMAccountName',\r\n  'uid',\r\n  'userPrincipalName',\r\n];\r\nconst ldapSearchUsernameAvailableFields = [\r\n  // User ID\r\n  'mailNickname',\r\n  'sAMAccountName',\r\n  'uid',\r\n  'userPrincipalName',\r\n  // Email Address\r\n  'mail',\r\n  'rfc822Mailbox ',\r\n];\r\n\r\nconst _sort = (list = [], selected = []) => {\r\n  // Must have the list sorted first before options are created, due to Select2 will sort array based on the list order.\r\n  for (let i = 0; i < selected.length; i++) {\r\n    const foundIndex = list.indexOf(selected[i]);\r\n    if (foundIndex > 0) {\r\n      list.splice(i, 0, list.splice(list.indexOf(selected[i]), 1)[0]);\r\n    }\r\n  }\r\n  return list;\r\n}\r\n\r\napp.initializers.add('yippy-auth-ldap', function(app) {\r\n  app.extensionData\r\n    .for('yippy-auth-ldap')\r\n    .registerSetting(\r\n      {\r\n        setting: settingsPrefix + 'method_name',\r\n        label: app.translator.trans(translationPrefix + 'method_name'),\r\n        type: 'text',\r\n        placeholder: 'YunoHost',\r\n      }\r\n    )\r\n    .registerSetting(\r\n      function (this: ExtensionPage) {\r\n        let ldapDomains: LdapDomain[];\r\n\r\n        try {\r\n          ldapDomains = JSON.parse(this.setting(ldapDomainsSettingKey)());\r\n        } catch (e) {\r\n          // do nothing, we'll reset to something usable\r\n        }\r\n        console.log(ldapDomains[0].isEnabled == undefined? \"true\": \"false\");\r\n        // @ts-ignore variable used before assignment, it's fine\r\n        if (!Array.isArray(ldapDomains)) {\r\n          ldapDomains = [];\r\n        }\r\n\r\n        return m('.Form-group', [\r\n          m('label', app.translator.trans(translationPrefix + 'domains.title')),\r\n          m('.helpText', app.translator.trans(translationPrefix + 'domains.description')),\r\n          m('table', {style:'table-layout:fixed'}, [\r\n            m('tbody', [\r\n              ldapDomains.map((rule, index) => m('table', {\r\n                border: '1px solid black',\r\n                'style': rule.isEnabled || rule.isEnabled == undefined ?'background-color: #ffffff':'background-color: #F88379',\r\n              }, [\r\n                m('thead', m('tr', [\r\n                  m('th', app.translator.trans(translationPrefix + 'domains.banner', {index: index+1, isEnabled: rule.isEnabled || rule.isEnabled == undefined ? app.translator.trans(translationPrefix + 'domains.is_enabled.enabled'): app.translator.trans(translationPrefix + 'domains.is_enabled.disabled')})),\r\n                  m('th', Button.component({\r\n                    className: 'Button Button--icon',\r\n                    icon: 'fas fa-times',\r\n                    onclick: () => {\r\n                      ldapDomains.splice(index, 1);\r\n                        this.setting(ldapDomainsSettingKey)(ldapDomains.length > 0 ? JSON.stringify(ldapDomains) : null);\r\n                    },\r\n                  })\r\n                  )\r\n                ])),\r\n                m('tbody', [\r\n                  m('table', [\r\n                    m('thead', m('tr', [\r\n                      m('th', { width: '30%' }),\r\n                      m('th', { width: '70%' }),\r\n                    ])),\r\n                    m('tbody', [\r\n                      m('tr', [\r\n                        m('th', { colspan: 2 }, app.translator.trans(translationPrefix + 'domains.header.server')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.host')),\r\n                        m('td', m('input.FormControl', {\r\n                          type: 'text',\r\n                          value: rule.host || '',\r\n                          placeholder: 'localhost',\r\n                          onchange: (event: InputEvent) => {\r\n                              rule.host = (event.target as HTMLInputElement).value;\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                          },\r\n                        })),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', { colspan: 2, class: 'helpText'}, app.translator.trans(translationPrefix + 'domains.data.host_help')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.port')),\r\n                        m('td', m('input.FormControl', {\r\n                          type: 'number',\r\n                          value: rule.port || 389,\r\n                          placeholder: '389',\r\n                          onchange: (event: InputEvent) => {\r\n                              rule.port = Number((event.target as HTMLInputElement).value);\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                          },\r\n                        })),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', { colspan: 2, class: 'helpText'}, app.translator.trans(translationPrefix + 'domains.data.port_help')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.version')),\r\n                        m('td', m('input.FormControl', {\r\n                          type: 'number',\r\n                          value: rule.version || 3,\r\n                          placeholder: '3',\r\n                          onchange: (event: InputEvent) => {\r\n                            rule.version = Number((event.target as HTMLInputElement).value);\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                          },\r\n                        })),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', { colspan: 2, class: 'helpText'}, app.translator.trans(translationPrefix + 'domains.data.version_help')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.base_dn')),\r\n                        m('td', m('input.FormControl', {\r\n                          type: 'text',\r\n                          value: rule.baseDN || '',\r\n                          placeholder: 'ou=users,dc=yunohost,dc=org',\r\n                          onchange: (event: InputEvent) => {\r\n                              rule.baseDN = (event.target as HTMLInputElement).value;\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                          },\r\n                        })),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', { colspan: 2, class: 'helpText'}, app.translator.trans(translationPrefix + 'domains.data.base_dn_help')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.filter')),\r\n                        m('td', m('input.FormControl', {\r\n                          type: 'text',\r\n                          value: rule.filter || '',\r\n                          placeholder: '(&(objectClass=posixAccount)(permission=cn=flarum.main,ou=permission,dc=yunohost,dc=org)',\r\n                          onchange: (event: InputEvent) => {\r\n                              rule.filter = (event.target as HTMLInputElement).value;\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                          },\r\n                        })),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', { colspan: 2, class: 'helpText'}, app.translator.trans(translationPrefix + 'domains.data.filter_help')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.follow_referrals')),\r\n                        m('td', m('input', {\r\n                          type: 'checkbox',\r\n                          checked: rule.followReferrals,\r\n                          onchange: (event: InputEvent) => {\r\n                              rule.followReferrals = (event.target as HTMLInputElement).checked;\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                          },\r\n                        })),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.use_ssl')),\r\n                        m('td', m('input', {\r\n                          type: 'checkbox',\r\n                          checked: rule.useSSL,\r\n                          onchange: (event: InputEvent) => {\r\n                              rule.useSSL = (event.target as HTMLInputElement).checked;\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                          },\r\n                        })),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.use_tls')),\r\n                        m('td', m('input', {\r\n                          type: 'checkbox',\r\n                          checked: rule.useTLS,\r\n                          onchange: (event: InputEvent) => {\r\n                              rule.useTLS = (event.target as HTMLInputElement).checked;\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                          },\r\n                        })),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('th', { colspan: 2 }, app.translator.trans(translationPrefix + 'domains.header.admin')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.admin_dn')),\r\n                        m('td', m('input.FormControl', {\r\n                          type: 'text',\r\n                          value: rule.admin.dn || '',\r\n                          placeholder: 'cn=admin,dc=yunohost,dc=org',\r\n                          onchange: (event: InputEvent) => {\r\n                              rule.admin.dn = (event.target as HTMLInputElement).value;\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                          },\r\n                        })),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', { colspan: 2, class: 'helpText'}, app.translator.trans(translationPrefix + 'domains.data.admin_dn_help')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.admin_password')),\r\n                        m('td', m('input.FormControl', {\r\n                          type: 'text',\r\n                          value: rule.admin.password || '',\r\n                          placeholder: 'password',\r\n                          onchange: (event: InputEvent) => {\r\n                              rule.admin.password = (event.target as HTMLInputElement).value;\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                          },\r\n                        })),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', { colspan: 2, class: 'helpText'}, app.translator.trans(translationPrefix + 'domains.data.admin_password_help')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('th', { colspan: 2 }, app.translator.trans(translationPrefix + 'domains.header.search_fields')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', { colspan: 2 }, app.translator.trans(translationPrefix + 'domains.header.search_fields_description')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.search_user_fields')),\r\n                        m('td',\r\n                          m('select', {\r\n                            oncreate: ({dom}) => $(dom).select2({ width: '100%', multiple: true, data: _sort(ldapSearchUsernameAvailableFields, rule.searchFields)}).on(\"change\", function() {\r\n                              this.dispatchEvent(new CustomEvent('edit', {\"detail\": $(this).val()}));\r\n                            }).on('select2:select', function(e){\r\n                              var id = e.params.data.id;\r\n                              var option = $(e.target).children('[value='+id+']');\r\n                              option.detach();\r\n                              $(e.target).append(option).change();\r\n                            }).val(rule.searchFields || []).trigger(\"change\"),\r\n                            onedit: (event: InputEvent) => {\r\n                              rule.searchFields = event.detail;\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                            }\r\n                          })\r\n                        )\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', { colspan: 2, class: 'helpText'}, app.translator.trans(translationPrefix + 'domains.data.search_user_fields_help')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('th', { colspan: 2 }, app.translator.trans(translationPrefix + 'domains.header.flarum')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', { colspan: 2 }, app.translator.trans(translationPrefix + 'domains.header.flarum_description')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.user_username')),\r\n                        m('td',\r\n                          m('select', {\r\n                            value: rule.user.username || '',\r\n                            oncreate: ({dom}) => $(dom).select2({ width: '100%', allowClear: true, placeholder: '' }).on(\"change\", function() {\r\n                              this.dispatchEvent(new CustomEvent('edit', {\"detail\": this.value}));\r\n                            }),\r\n                            onedit: (event: InputEvent) => {\r\n                              rule.user.username = event.detail;\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                            }\r\n                          },\r\n                            [\r\n                              ldapUsernameAvailableFields.map(field => [\r\n                                m('option', { value: field }, field)\r\n                              ])\r\n                            ]\r\n                          )\r\n                        )\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.user_mail')),\r\n                        m('td',\r\n                          m('select', {\r\n                            value: rule.user.mail || '',\r\n                            oncreate: ({dom}) => $(dom).select2({ width: '100%', allowClear: true, placeholder: '' }).on(\"change\", function() {\r\n                              this.dispatchEvent(new CustomEvent('edit', {\"detail\": this.value}));\r\n                            }),\r\n                            onedit: (event: InputEvent) => {\r\n                              rule.user.mail = event.detail;\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                            }\r\n                          },\r\n                            [\r\n                              ldapEmailAvailableFields.map(field => [\r\n                                m('option', { value: field }, field)\r\n                              ])\r\n                            ]\r\n                          )\r\n                        )\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', { colspan: 2, class: 'helpText'}, app.translator.trans(translationPrefix + 'domains.data.user_mail_help')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.user_nickname_fields')),\r\n                        m('td',\r\n                          m('select', {\r\n                            oncreate: ({dom}) => $(dom).select2({ width: '100%', multiple: true, data: _sort(ldapNicknameAvailableFields, rule.user.nicknameFields)}).on(\"change\", function() {\r\n                              this.dispatchEvent(new CustomEvent('edit', {\"detail\": $(this).val()}));\r\n                            }).on('select2:select', function(e){\r\n                              var id = e.params.data.id;\r\n                              var option = $(e.target).children('[value='+id+']');\r\n                              option.detach();\r\n                              $(e.target).append(option).change();\r\n                            }).val(rule.user.nicknameFields || []).trigger(\"change\"),\r\n                            onedit: (event: InputEvent) => {\r\n                              rule.user.nicknameFields = event.detail;\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                            }\r\n                          })\r\n                        )\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', { colspan: 2, class: 'helpText'}, app.translator.trans(translationPrefix + 'domains.data.user_nickname_fields_help')),\r\n                      ]),\r\n                      m('tr', [\r\n                        m('td', app.translator.trans(translationPrefix + 'domains.data.is_enabled')),\r\n                        m('td', m('input', {\r\n                          type: 'checkbox',\r\n                          checked: rule.isEnabled || rule.isEnabled == undefined,\r\n                          onchange: (event: InputEvent) => {\r\n                              rule.isEnabled = (event.target as HTMLInputElement).checked;\r\n                              this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                          },\r\n                        })),\r\n                      ])\r\n                    ])\r\n                  ])\r\n                ])\r\n              ])),\r\n              m('tr', m('td', Button.component({\r\n                className: 'Button Button--block',\r\n                onclick: () => {\r\n                  ldapDomains.push({\r\n                    host: '',\r\n                    port: 389,\r\n                    version: 3,\r\n                    baseDN: '',\r\n                    filter: '',\r\n                    admin: {\r\n                      dn: '',\r\n                      password: '',\r\n                    },\r\n                    searchFields: [],\r\n                    user: {\r\n                      username: '',\r\n                      mail: '',\r\n                      nicknameFields: [],\r\n                    },\r\n                    followReferrals: false,\r\n                    useSSL: false,\r\n                    useTLS: false\r\n                  });\r\n\r\n                  this.setting(ldapDomainsSettingKey)(JSON.stringify(ldapDomains));\r\n                },\r\n              }, app.translator.trans(translationPrefix + 'domains.add'))))\r\n            ]),\r\n          ]),\r\n        ]);\r\n      }\r\n    )\r\n    .registerSetting(\r\n      {\r\n        setting: settingsPrefix + 'onlyUse',\r\n        label: app.translator.trans(translationPrefix + 'onlyUse'),\r\n        type: 'boolean',\r\n        default: false,\r\n      }\r\n    )\r\n    .registerSetting(\r\n      {\r\n        setting: settingsPrefix + 'display_detailed_error',\r\n        label: app.translator.trans(translationPrefix + 'display_detailed_error'),\r\n        type: 'boolean',\r\n        default: false,\r\n      }\r\n    )\r\n});\r\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","flarum","core","compat","settingsPrefix","translationPrefix","ldapDomainsSettingKey","ldapNicknameAvailableFields","ldapEmailAvailableFields","ldapUsernameAvailableFields","ldapSearchUsernameAvailableFields","_sort","list","selected","i","length","indexOf","splice","app","add","extensionData","registerSetting","setting","label","translator","trans","type","placeholder","ldapDomains","_this","JSON","parse","this","e","console","log","undefined","isEnabled","Array","isArray","m","style","map","rule","index","border","Button","className","icon","onclick","stringify","width","colspan","value","host","onchange","event","target","class","port","Number","version","baseDN","filter","checked","followReferrals","useSSL","useTLS","admin","dn","password","oncreate","_ref","dom","$","select2","multiple","data","searchFields","on","dispatchEvent","CustomEvent","val","id","params","option","children","detach","append","change","trigger","onedit","detail","user","username","_ref2","allowClear","field","mail","_ref3","_ref4","nicknameFields","push","default"],"sourceRoot":""}